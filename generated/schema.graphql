### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Challenge {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String!
  organization: String
  primaryTopic: HackerTopic!
  projects(skip: Int): [Project!]!
  resources: String
  solution: String
  teamsThatCanSelectThisChallenge(skip: Int): [Team!]!
  teamsThatSelectedThisChallenge(skip: Int): [Team!]!
  title: String!
  usersThatPreferThisChallenge(skip: Int): [User!]!
}

input ChallengeCreateInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  primaryTopic: HackerTopicCreateOneWithoutPrimaryChallengesInput!
  projects: ProjectCreateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamCreateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamCreateManyWithoutChallengeSelectedInput
  title: String!
  usersThatPreferThisChallenge: UserCreateManyWithoutPreferredChallengeInput
}

input ChallengeCreateManyWithoutPrimaryTopicInput {
  connect: [ChallengeWhereUniqueInput!]
  create: [ChallengeCreateWithoutPrimaryTopicInput!]
}

input ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput {
  connect: [ChallengeWhereUniqueInput!]
  create: [ChallengeCreateWithoutTeamsThatCanSelectThisChallengeInput!]
}

input ChallengeCreateOneWithoutProjectsInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutProjectsInput
}

input ChallengeCreateOneWithoutTeamChallengeVotesInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutTeamChallengeVotesInput
}

input ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutTeamsThatSelectedThisChallengeInput
}

input ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutUsersThatPreferThisChallengeInput
}

input ChallengeCreateWithoutPrimaryTopicInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  projects: ProjectCreateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamCreateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamCreateManyWithoutChallengeSelectedInput
  title: String!
  usersThatPreferThisChallenge: UserCreateManyWithoutPreferredChallengeInput
}

input ChallengeCreateWithoutProjectsInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  primaryTopic: HackerTopicCreateOneWithoutPrimaryChallengesInput!
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamCreateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamCreateManyWithoutChallengeSelectedInput
  title: String!
  usersThatPreferThisChallenge: UserCreateManyWithoutPreferredChallengeInput
}

input ChallengeCreateWithoutTeamChallengeVotesInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  primaryTopic: HackerTopicCreateOneWithoutPrimaryChallengesInput!
  projects: ProjectCreateManyWithoutChallengeInput
  resources: String
  solution: String
  teamsThatCanSelectThisChallenge: TeamCreateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamCreateManyWithoutChallengeSelectedInput
  title: String!
  usersThatPreferThisChallenge: UserCreateManyWithoutPreferredChallengeInput
}

input ChallengeCreateWithoutTeamsThatCanSelectThisChallengeInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  primaryTopic: HackerTopicCreateOneWithoutPrimaryChallengesInput!
  projects: ProjectCreateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutChallengeInput
  teamsThatSelectedThisChallenge: TeamCreateManyWithoutChallengeSelectedInput
  title: String!
  usersThatPreferThisChallenge: UserCreateManyWithoutPreferredChallengeInput
}

input ChallengeCreateWithoutTeamsThatSelectedThisChallengeInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  primaryTopic: HackerTopicCreateOneWithoutPrimaryChallengesInput!
  projects: ProjectCreateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamCreateManyWithoutChallengesToSelectInput
  title: String!
  usersThatPreferThisChallenge: UserCreateManyWithoutPreferredChallengeInput
}

input ChallengeCreateWithoutUsersThatPreferThisChallengeInput {
  challenge: String!
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String!
  id: String
  organization: String
  primaryTopic: HackerTopicCreateOneWithoutPrimaryChallengesInput!
  projects: ProjectCreateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamCreateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamCreateManyWithoutChallengeSelectedInput
  title: String!
}

input ChallengeFilter {
  every: ChallengeWhereInput
  none: ChallengeWhereInput
  some: ChallengeWhereInput
}

input ChallengeOrderByInput {
  challenge: OrderByArg
  commentsByTeam: OrderByArg
  contactEmail: OrderByArg
  contactName: OrderByArg
  context: OrderByArg
  id: OrderByArg
  organization: OrderByArg
  primaryTopicId: OrderByArg
  resources: OrderByArg
  solution: OrderByArg
  title: OrderByArg
}

input ChallengeScalarWhereInput {
  AND: [ChallengeScalarWhereInput!]
  challenge: StringFilter
  commentsByTeam: NullableStringFilter
  contactEmail: NullableStringFilter
  contactName: NullableStringFilter
  context: StringFilter
  id: UUIDFilter
  NOT: [ChallengeScalarWhereInput!]
  OR: [ChallengeScalarWhereInput!]
  organization: NullableStringFilter
  primaryTopicId: StringFilter
  projects: ProjectFilter
  resources: NullableStringFilter
  solution: NullableStringFilter
  teamChallengeVotes: TeamChallengeVoteFilter
  teamsThatCanSelectThisChallenge: TeamFilter
  teamsThatSelectedThisChallenge: TeamFilter
  title: StringFilter
  usersThatPreferThisChallenge: UserFilter
}

input ChallengeUpdateInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  primaryTopic: HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput
  projects: ProjectUpdateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamUpdateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamUpdateManyWithoutChallengeSelectedInput
  title: String
  usersThatPreferThisChallenge: UserUpdateManyWithoutPreferredChallengeInput
}

input ChallengeUpdateManyDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  resources: String
  solution: String
  title: String
}

input ChallengeUpdateManyMutationInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  resources: String
  solution: String
  title: String
}

input ChallengeUpdateManyWithoutPrimaryTopicInput {
  connect: [ChallengeWhereUniqueInput!]
  create: [ChallengeCreateWithoutPrimaryTopicInput!]
  delete: [ChallengeWhereUniqueInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  set: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutPrimaryTopicInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutPrimaryTopicInput!]
}

input ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput {
  connect: [ChallengeWhereUniqueInput!]
  create: [ChallengeCreateWithoutTeamsThatCanSelectThisChallengeInput!]
  delete: [ChallengeWhereUniqueInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  set: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutTeamsThatCanSelectThisChallengeInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutTeamsThatCanSelectThisChallengeInput!]
}

input ChallengeUpdateManyWithWhereNestedInput {
  data: ChallengeUpdateManyDataInput!
  where: ChallengeScalarWhereInput!
}

input ChallengeUpdateOneRequiredWithoutTeamChallengeVotesInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutTeamChallengeVotesInput
  update: ChallengeUpdateWithoutTeamChallengeVotesDataInput
  upsert: ChallengeUpsertWithoutTeamChallengeVotesInput
}

input ChallengeUpdateOneWithoutProjectsInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutProjectsInput
  delete: Boolean
  disconnect: Boolean
  update: ChallengeUpdateWithoutProjectsDataInput
  upsert: ChallengeUpsertWithoutProjectsInput
}

input ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutTeamsThatSelectedThisChallengeInput
  delete: Boolean
  disconnect: Boolean
  update: ChallengeUpdateWithoutTeamsThatSelectedThisChallengeDataInput
  upsert: ChallengeUpsertWithoutTeamsThatSelectedThisChallengeInput
}

input ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput {
  connect: ChallengeWhereUniqueInput
  create: ChallengeCreateWithoutUsersThatPreferThisChallengeInput
  delete: Boolean
  disconnect: Boolean
  update: ChallengeUpdateWithoutUsersThatPreferThisChallengeDataInput
  upsert: ChallengeUpsertWithoutUsersThatPreferThisChallengeInput
}

input ChallengeUpdateWithoutPrimaryTopicDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  projects: ProjectUpdateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamUpdateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamUpdateManyWithoutChallengeSelectedInput
  title: String
  usersThatPreferThisChallenge: UserUpdateManyWithoutPreferredChallengeInput
}

input ChallengeUpdateWithoutProjectsDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  primaryTopic: HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamUpdateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamUpdateManyWithoutChallengeSelectedInput
  title: String
  usersThatPreferThisChallenge: UserUpdateManyWithoutPreferredChallengeInput
}

input ChallengeUpdateWithoutTeamChallengeVotesDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  primaryTopic: HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput
  projects: ProjectUpdateManyWithoutChallengeInput
  resources: String
  solution: String
  teamsThatCanSelectThisChallenge: TeamUpdateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamUpdateManyWithoutChallengeSelectedInput
  title: String
  usersThatPreferThisChallenge: UserUpdateManyWithoutPreferredChallengeInput
}

input ChallengeUpdateWithoutTeamsThatCanSelectThisChallengeDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  primaryTopic: HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput
  projects: ProjectUpdateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutChallengeInput
  teamsThatSelectedThisChallenge: TeamUpdateManyWithoutChallengeSelectedInput
  title: String
  usersThatPreferThisChallenge: UserUpdateManyWithoutPreferredChallengeInput
}

input ChallengeUpdateWithoutTeamsThatSelectedThisChallengeDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  primaryTopic: HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput
  projects: ProjectUpdateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamUpdateManyWithoutChallengesToSelectInput
  title: String
  usersThatPreferThisChallenge: UserUpdateManyWithoutPreferredChallengeInput
}

input ChallengeUpdateWithoutUsersThatPreferThisChallengeDataInput {
  challenge: String
  commentsByTeam: String
  contactEmail: String
  contactName: String
  context: String
  id: String
  organization: String
  primaryTopic: HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput
  projects: ProjectUpdateManyWithoutChallengeInput
  resources: String
  solution: String
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutChallengeInput
  teamsThatCanSelectThisChallenge: TeamUpdateManyWithoutChallengesToSelectInput
  teamsThatSelectedThisChallenge: TeamUpdateManyWithoutChallengeSelectedInput
  title: String
}

input ChallengeUpdateWithWhereUniqueWithoutPrimaryTopicInput {
  data: ChallengeUpdateWithoutPrimaryTopicDataInput!
  where: ChallengeWhereUniqueInput!
}

input ChallengeUpdateWithWhereUniqueWithoutTeamsThatCanSelectThisChallengeInput {
  data: ChallengeUpdateWithoutTeamsThatCanSelectThisChallengeDataInput!
  where: ChallengeWhereUniqueInput!
}

input ChallengeUpsertWithoutProjectsInput {
  create: ChallengeCreateWithoutProjectsInput!
  update: ChallengeUpdateWithoutProjectsDataInput!
}

input ChallengeUpsertWithoutTeamChallengeVotesInput {
  create: ChallengeCreateWithoutTeamChallengeVotesInput!
  update: ChallengeUpdateWithoutTeamChallengeVotesDataInput!
}

input ChallengeUpsertWithoutTeamsThatSelectedThisChallengeInput {
  create: ChallengeCreateWithoutTeamsThatSelectedThisChallengeInput!
  update: ChallengeUpdateWithoutTeamsThatSelectedThisChallengeDataInput!
}

input ChallengeUpsertWithoutUsersThatPreferThisChallengeInput {
  create: ChallengeCreateWithoutUsersThatPreferThisChallengeInput!
  update: ChallengeUpdateWithoutUsersThatPreferThisChallengeDataInput!
}

input ChallengeUpsertWithWhereUniqueWithoutPrimaryTopicInput {
  create: ChallengeCreateWithoutPrimaryTopicInput!
  update: ChallengeUpdateWithoutPrimaryTopicDataInput!
  where: ChallengeWhereUniqueInput!
}

input ChallengeUpsertWithWhereUniqueWithoutTeamsThatCanSelectThisChallengeInput {
  create: ChallengeCreateWithoutTeamsThatCanSelectThisChallengeInput!
  update: ChallengeUpdateWithoutTeamsThatCanSelectThisChallengeDataInput!
  where: ChallengeWhereUniqueInput!
}

input ChallengeWhereInput {
  AND: [ChallengeWhereInput!]
  challenge: StringFilter
  commentsByTeam: NullableStringFilter
  contactEmail: NullableStringFilter
  contactName: NullableStringFilter
  context: StringFilter
  id: UUIDFilter
  NOT: [ChallengeWhereInput!]
  OR: [ChallengeWhereInput!]
  organization: NullableStringFilter
  primaryTopic: HackerTopicWhereInput
  primaryTopicId: StringFilter
  projects: ProjectFilter
  resources: NullableStringFilter
  solution: NullableStringFilter
  teamChallengeVotes: TeamChallengeVoteFilter
  teamsThatCanSelectThisChallenge: TeamFilter
  teamsThatSelectedThisChallenge: TeamFilter
  title: StringFilter
  usersThatPreferThisChallenge: UserFilter
}

input ChallengeWhereUniqueInput {
  id: String
  title: String
}

type ChallengeWithMyVote {
  challenge: Challenge!
  myVote: Int!
}

type ChoseTeamChallengeVoteWinnerResult {
  success: Boolean!
  teams: [Team!]!
  teamsUpdated: Int!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FromToCompoundUniqueInput {
  from: DateTime!
  to: DateTime!
}

type HackerSkill {
  description: String!
  id: String!
  title: String!
}

input HackerSkillCreateInput {
  description: String!
  id: String!
  title: String!
  users: UserCreateManyWithoutHackerSkillsInput
}

input HackerSkillCreateManyWithoutUsersInput {
  connect: [HackerSkillWhereUniqueInput!]
  create: [HackerSkillCreateWithoutUsersInput!]
}

input HackerSkillCreateWithoutUsersInput {
  description: String!
  id: String!
  title: String!
}

input HackerSkillFilter {
  every: HackerSkillWhereInput
  none: HackerSkillWhereInput
  some: HackerSkillWhereInput
}

input HackerSkillOrderByInput {
  description: OrderByArg
  id: OrderByArg
  title: OrderByArg
}

input HackerSkillScalarWhereInput {
  AND: [HackerSkillScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [HackerSkillScalarWhereInput!]
  OR: [HackerSkillScalarWhereInput!]
  title: StringFilter
  users: UserFilter
}

input HackerSkillUpdateInput {
  description: String
  id: String
  title: String
  users: UserUpdateManyWithoutHackerSkillsInput
}

input HackerSkillUpdateManyDataInput {
  description: String
  id: String
  title: String
}

input HackerSkillUpdateManyMutationInput {
  description: String
  id: String
  title: String
}

input HackerSkillUpdateManyWithoutUsersInput {
  connect: [HackerSkillWhereUniqueInput!]
  create: [HackerSkillCreateWithoutUsersInput!]
  delete: [HackerSkillWhereUniqueInput!]
  deleteMany: [HackerSkillScalarWhereInput!]
  disconnect: [HackerSkillWhereUniqueInput!]
  set: [HackerSkillWhereUniqueInput!]
  update: [HackerSkillUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [HackerSkillUpdateManyWithWhereNestedInput!]
  upsert: [HackerSkillUpsertWithWhereUniqueWithoutUsersInput!]
}

input HackerSkillUpdateManyWithWhereNestedInput {
  data: HackerSkillUpdateManyDataInput!
  where: HackerSkillScalarWhereInput!
}

input HackerSkillUpdateWithoutUsersDataInput {
  description: String
  id: String
  title: String
}

input HackerSkillUpdateWithWhereUniqueWithoutUsersInput {
  data: HackerSkillUpdateWithoutUsersDataInput!
  where: HackerSkillWhereUniqueInput!
}

input HackerSkillUpsertWithWhereUniqueWithoutUsersInput {
  create: HackerSkillCreateWithoutUsersInput!
  update: HackerSkillUpdateWithoutUsersDataInput!
  where: HackerSkillWhereUniqueInput!
}

input HackerSkillWhereInput {
  AND: [HackerSkillWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [HackerSkillWhereInput!]
  OR: [HackerSkillWhereInput!]
  title: StringFilter
  users: UserFilter
}

input HackerSkillWhereUniqueInput {
  id: String
  title: String
}

type HackerTopic {
  description: String!
  id: String!
  primaryChallenges(skip: Int): [Challenge!]!
  slack: SlackConversation
  title: String!
}

input HackerTopicCreateInput {
  description: String!
  id: String!
  mentors: MentorCreateManyWithoutTopicsInput
  primaryChallenges: ChallengeCreateManyWithoutPrimaryTopicInput
  slackId: String
  teams: TeamCreateManyWithoutPrimaryTopicInput
  title: String!
  users: UserCreateManyWithoutHackerTopicsInput
}

input HackerTopicCreateManyWithoutMentorsInput {
  connect: [HackerTopicWhereUniqueInput!]
  create: [HackerTopicCreateWithoutMentorsInput!]
}

input HackerTopicCreateManyWithoutUsersInput {
  connect: [HackerTopicWhereUniqueInput!]
  create: [HackerTopicCreateWithoutUsersInput!]
}

input HackerTopicCreateOneWithoutPrimaryChallengesInput {
  connect: HackerTopicWhereUniqueInput
  create: HackerTopicCreateWithoutPrimaryChallengesInput
}

input HackerTopicCreateOneWithoutTeamsInput {
  connect: HackerTopicWhereUniqueInput
  create: HackerTopicCreateWithoutTeamsInput
}

input HackerTopicCreateWithoutMentorsInput {
  description: String!
  id: String!
  primaryChallenges: ChallengeCreateManyWithoutPrimaryTopicInput
  slackId: String
  teams: TeamCreateManyWithoutPrimaryTopicInput
  title: String!
  users: UserCreateManyWithoutHackerTopicsInput
}

input HackerTopicCreateWithoutPrimaryChallengesInput {
  description: String!
  id: String!
  mentors: MentorCreateManyWithoutTopicsInput
  slackId: String
  teams: TeamCreateManyWithoutPrimaryTopicInput
  title: String!
  users: UserCreateManyWithoutHackerTopicsInput
}

input HackerTopicCreateWithoutTeamsInput {
  description: String!
  id: String!
  mentors: MentorCreateManyWithoutTopicsInput
  primaryChallenges: ChallengeCreateManyWithoutPrimaryTopicInput
  slackId: String
  title: String!
  users: UserCreateManyWithoutHackerTopicsInput
}

input HackerTopicCreateWithoutUsersInput {
  description: String!
  id: String!
  mentors: MentorCreateManyWithoutTopicsInput
  primaryChallenges: ChallengeCreateManyWithoutPrimaryTopicInput
  slackId: String
  teams: TeamCreateManyWithoutPrimaryTopicInput
  title: String!
}

input HackerTopicFilter {
  every: HackerTopicWhereInput
  none: HackerTopicWhereInput
  some: HackerTopicWhereInput
}

input HackerTopicOrderByInput {
  description: OrderByArg
  id: OrderByArg
  slackId: OrderByArg
  title: OrderByArg
}

input HackerTopicScalarWhereInput {
  AND: [HackerTopicScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  mentors: MentorFilter
  NOT: [HackerTopicScalarWhereInput!]
  OR: [HackerTopicScalarWhereInput!]
  primaryChallenges: ChallengeFilter
  slackId: NullableStringFilter
  teams: TeamFilter
  title: StringFilter
  users: UserFilter
}

input HackerTopicUpdateInput {
  description: String
  id: String
  mentors: MentorUpdateManyWithoutTopicsInput
  primaryChallenges: ChallengeUpdateManyWithoutPrimaryTopicInput
  slackId: String
  teams: TeamUpdateManyWithoutPrimaryTopicInput
  title: String
  users: UserUpdateManyWithoutHackerTopicsInput
}

input HackerTopicUpdateManyDataInput {
  description: String
  id: String
  slackId: String
  title: String
}

input HackerTopicUpdateManyMutationInput {
  description: String
  id: String
  slackId: String
  title: String
}

input HackerTopicUpdateManyWithoutMentorsInput {
  connect: [HackerTopicWhereUniqueInput!]
  create: [HackerTopicCreateWithoutMentorsInput!]
  delete: [HackerTopicWhereUniqueInput!]
  deleteMany: [HackerTopicScalarWhereInput!]
  disconnect: [HackerTopicWhereUniqueInput!]
  set: [HackerTopicWhereUniqueInput!]
  update: [HackerTopicUpdateWithWhereUniqueWithoutMentorsInput!]
  updateMany: [HackerTopicUpdateManyWithWhereNestedInput!]
  upsert: [HackerTopicUpsertWithWhereUniqueWithoutMentorsInput!]
}

input HackerTopicUpdateManyWithoutUsersInput {
  connect: [HackerTopicWhereUniqueInput!]
  create: [HackerTopicCreateWithoutUsersInput!]
  delete: [HackerTopicWhereUniqueInput!]
  deleteMany: [HackerTopicScalarWhereInput!]
  disconnect: [HackerTopicWhereUniqueInput!]
  set: [HackerTopicWhereUniqueInput!]
  update: [HackerTopicUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [HackerTopicUpdateManyWithWhereNestedInput!]
  upsert: [HackerTopicUpsertWithWhereUniqueWithoutUsersInput!]
}

input HackerTopicUpdateManyWithWhereNestedInput {
  data: HackerTopicUpdateManyDataInput!
  where: HackerTopicScalarWhereInput!
}

input HackerTopicUpdateOneRequiredWithoutPrimaryChallengesInput {
  connect: HackerTopicWhereUniqueInput
  create: HackerTopicCreateWithoutPrimaryChallengesInput
  update: HackerTopicUpdateWithoutPrimaryChallengesDataInput
  upsert: HackerTopicUpsertWithoutPrimaryChallengesInput
}

input HackerTopicUpdateOneWithoutTeamsInput {
  connect: HackerTopicWhereUniqueInput
  create: HackerTopicCreateWithoutTeamsInput
  delete: Boolean
  disconnect: Boolean
  update: HackerTopicUpdateWithoutTeamsDataInput
  upsert: HackerTopicUpsertWithoutTeamsInput
}

input HackerTopicUpdateWithoutMentorsDataInput {
  description: String
  id: String
  primaryChallenges: ChallengeUpdateManyWithoutPrimaryTopicInput
  slackId: String
  teams: TeamUpdateManyWithoutPrimaryTopicInput
  title: String
  users: UserUpdateManyWithoutHackerTopicsInput
}

input HackerTopicUpdateWithoutPrimaryChallengesDataInput {
  description: String
  id: String
  mentors: MentorUpdateManyWithoutTopicsInput
  slackId: String
  teams: TeamUpdateManyWithoutPrimaryTopicInput
  title: String
  users: UserUpdateManyWithoutHackerTopicsInput
}

input HackerTopicUpdateWithoutTeamsDataInput {
  description: String
  id: String
  mentors: MentorUpdateManyWithoutTopicsInput
  primaryChallenges: ChallengeUpdateManyWithoutPrimaryTopicInput
  slackId: String
  title: String
  users: UserUpdateManyWithoutHackerTopicsInput
}

input HackerTopicUpdateWithoutUsersDataInput {
  description: String
  id: String
  mentors: MentorUpdateManyWithoutTopicsInput
  primaryChallenges: ChallengeUpdateManyWithoutPrimaryTopicInput
  slackId: String
  teams: TeamUpdateManyWithoutPrimaryTopicInput
  title: String
}

input HackerTopicUpdateWithWhereUniqueWithoutMentorsInput {
  data: HackerTopicUpdateWithoutMentorsDataInput!
  where: HackerTopicWhereUniqueInput!
}

input HackerTopicUpdateWithWhereUniqueWithoutUsersInput {
  data: HackerTopicUpdateWithoutUsersDataInput!
  where: HackerTopicWhereUniqueInput!
}

input HackerTopicUpsertWithoutPrimaryChallengesInput {
  create: HackerTopicCreateWithoutPrimaryChallengesInput!
  update: HackerTopicUpdateWithoutPrimaryChallengesDataInput!
}

input HackerTopicUpsertWithoutTeamsInput {
  create: HackerTopicCreateWithoutTeamsInput!
  update: HackerTopicUpdateWithoutTeamsDataInput!
}

input HackerTopicUpsertWithWhereUniqueWithoutMentorsInput {
  create: HackerTopicCreateWithoutMentorsInput!
  update: HackerTopicUpdateWithoutMentorsDataInput!
  where: HackerTopicWhereUniqueInput!
}

input HackerTopicUpsertWithWhereUniqueWithoutUsersInput {
  create: HackerTopicCreateWithoutUsersInput!
  update: HackerTopicUpdateWithoutUsersDataInput!
  where: HackerTopicWhereUniqueInput!
}

input HackerTopicWhereInput {
  AND: [HackerTopicWhereInput!]
  description: StringFilter
  id: StringFilter
  mentors: MentorFilter
  NOT: [HackerTopicWhereInput!]
  OR: [HackerTopicWhereInput!]
  primaryChallenges: ChallengeFilter
  slackId: NullableStringFilter
  teams: TeamFilter
  title: StringFilter
  users: UserFilter
}

input HackerTopicWhereUniqueInput {
  id: String
  title: String
}

type HackerType {
  description: String!
  id: String!
  title: String!
}

input HackerTypeCreateInput {
  description: String!
  id: String!
  title: String!
  users: UserCreateManyWithoutHackerTypesInput
}

input HackerTypeCreateManyWithoutUsersInput {
  connect: [HackerTypeWhereUniqueInput!]
  create: [HackerTypeCreateWithoutUsersInput!]
}

input HackerTypeCreateWithoutUsersInput {
  description: String!
  id: String!
  title: String!
}

input HackerTypeFilter {
  every: HackerTypeWhereInput
  none: HackerTypeWhereInput
  some: HackerTypeWhereInput
}

input HackerTypeOrderByInput {
  description: OrderByArg
  id: OrderByArg
  title: OrderByArg
}

input HackerTypeScalarWhereInput {
  AND: [HackerTypeScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [HackerTypeScalarWhereInput!]
  OR: [HackerTypeScalarWhereInput!]
  title: StringFilter
  users: UserFilter
}

input HackerTypeUpdateInput {
  description: String
  id: String
  title: String
  users: UserUpdateManyWithoutHackerTypesInput
}

input HackerTypeUpdateManyDataInput {
  description: String
  id: String
  title: String
}

input HackerTypeUpdateManyMutationInput {
  description: String
  id: String
  title: String
}

input HackerTypeUpdateManyWithoutUsersInput {
  connect: [HackerTypeWhereUniqueInput!]
  create: [HackerTypeCreateWithoutUsersInput!]
  delete: [HackerTypeWhereUniqueInput!]
  deleteMany: [HackerTypeScalarWhereInput!]
  disconnect: [HackerTypeWhereUniqueInput!]
  set: [HackerTypeWhereUniqueInput!]
  update: [HackerTypeUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [HackerTypeUpdateManyWithWhereNestedInput!]
  upsert: [HackerTypeUpsertWithWhereUniqueWithoutUsersInput!]
}

input HackerTypeUpdateManyWithWhereNestedInput {
  data: HackerTypeUpdateManyDataInput!
  where: HackerTypeScalarWhereInput!
}

input HackerTypeUpdateWithoutUsersDataInput {
  description: String
  id: String
  title: String
}

input HackerTypeUpdateWithWhereUniqueWithoutUsersInput {
  data: HackerTypeUpdateWithoutUsersDataInput!
  where: HackerTypeWhereUniqueInput!
}

input HackerTypeUpsertWithWhereUniqueWithoutUsersInput {
  create: HackerTypeCreateWithoutUsersInput!
  update: HackerTypeUpdateWithoutUsersDataInput!
  where: HackerTypeWhereUniqueInput!
}

input HackerTypeWhereInput {
  AND: [HackerTypeWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [HackerTypeWhereInput!]
  OR: [HackerTypeWhereInput!]
  title: StringFilter
  users: UserFilter
}

input HackerTypeWhereUniqueInput {
  id: String
  title: String
}

type Image {
  base64: String!
  id: String!
}

input ImageCreateInput {
  base64: String!
  id: String
  project: ProjectCreateOneWithoutImagesInput
  user: UserCreateOneWithoutProfilePhotoInput
}

input ImageCreateManyWithoutProjectInput {
  connect: [ImageWhereUniqueInput!]
  create: [ImageCreateWithoutProjectInput!]
}

input ImageCreateOneWithoutUserInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutUserInput
}

input ImageCreateWithoutProjectInput {
  base64: String!
  id: String
  user: UserCreateOneWithoutProfilePhotoInput
}

input ImageCreateWithoutUserInput {
  base64: String!
  id: String
  project: ProjectCreateOneWithoutImagesInput
}

input ImageFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageOrderByInput {
  base64: OrderByArg
  id: OrderByArg
  projectId: OrderByArg
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  base64: StringFilter
  id: UUIDFilter
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  projectId: NullableStringFilter
}

input ImageUpdateInput {
  base64: String
  id: String
  project: ProjectUpdateOneWithoutImagesInput
  user: UserUpdateOneWithoutProfilePhotoInput
}

input ImageUpdateManyDataInput {
  base64: String
  id: String
}

input ImageUpdateManyMutationInput {
  base64: String
  id: String
}

input ImageUpdateManyWithoutProjectInput {
  connect: [ImageWhereUniqueInput!]
  create: [ImageCreateWithoutProjectInput!]
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutProjectInput!]
}

input ImageUpdateManyWithWhereNestedInput {
  data: ImageUpdateManyDataInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateOneWithoutUserInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUpdateWithoutUserDataInput
  upsert: ImageUpsertWithoutUserInput
}

input ImageUpdateWithoutProjectDataInput {
  base64: String
  id: String
  user: UserUpdateOneWithoutProfilePhotoInput
}

input ImageUpdateWithoutUserDataInput {
  base64: String
  id: String
  project: ProjectUpdateOneWithoutImagesInput
}

input ImageUpdateWithWhereUniqueWithoutProjectInput {
  data: ImageUpdateWithoutProjectDataInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithoutUserInput {
  create: ImageCreateWithoutUserInput!
  update: ImageUpdateWithoutUserDataInput!
}

input ImageUpsertWithWhereUniqueWithoutProjectInput {
  create: ImageCreateWithoutProjectInput!
  update: ImageUpdateWithoutProjectDataInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  base64: StringFilter
  id: UUIDFilter
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  project: ProjectWhereInput
  projectId: NullableStringFilter
  user: UserWhereInput
}

input ImageWhereUniqueInput {
  id: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type LoginResult {
  resumeToken: String!
  user: User!
}

type Mentor {
  email: String!
  id: String!
  languages: String!
  linkedin: String!
  name: String!
  skills: String!
  topics(skip: Int): [HackerTopic!]!
}

input MentorCreateInput {
  email: String!
  id: String
  languages: String!
  linkedin: String!
  name: String!
  skills: String!
  topics: HackerTopicCreateManyWithoutMentorsInput
}

input MentorCreateManyWithoutTopicsInput {
  connect: [MentorWhereUniqueInput!]
  create: [MentorCreateWithoutTopicsInput!]
}

input MentorCreateWithoutTopicsInput {
  email: String!
  id: String
  languages: String!
  linkedin: String!
  name: String!
  skills: String!
}

input MentorFilter {
  every: MentorWhereInput
  none: MentorWhereInput
  some: MentorWhereInput
}

input MentorOrderByInput {
  email: OrderByArg
  id: OrderByArg
  languages: OrderByArg
  linkedin: OrderByArg
  name: OrderByArg
  skills: OrderByArg
}

input MentorScalarWhereInput {
  AND: [MentorScalarWhereInput!]
  email: StringFilter
  id: UUIDFilter
  languages: StringFilter
  linkedin: StringFilter
  name: StringFilter
  NOT: [MentorScalarWhereInput!]
  OR: [MentorScalarWhereInput!]
  skills: StringFilter
  topics: HackerTopicFilter
}

input MentorUpdateInput {
  email: String
  id: String
  languages: String
  linkedin: String
  name: String
  skills: String
  topics: HackerTopicUpdateManyWithoutMentorsInput
}

input MentorUpdateManyDataInput {
  email: String
  id: String
  languages: String
  linkedin: String
  name: String
  skills: String
}

input MentorUpdateManyMutationInput {
  email: String
  id: String
  languages: String
  linkedin: String
  name: String
  skills: String
}

input MentorUpdateManyWithoutTopicsInput {
  connect: [MentorWhereUniqueInput!]
  create: [MentorCreateWithoutTopicsInput!]
  delete: [MentorWhereUniqueInput!]
  deleteMany: [MentorScalarWhereInput!]
  disconnect: [MentorWhereUniqueInput!]
  set: [MentorWhereUniqueInput!]
  update: [MentorUpdateWithWhereUniqueWithoutTopicsInput!]
  updateMany: [MentorUpdateManyWithWhereNestedInput!]
  upsert: [MentorUpsertWithWhereUniqueWithoutTopicsInput!]
}

input MentorUpdateManyWithWhereNestedInput {
  data: MentorUpdateManyDataInput!
  where: MentorScalarWhereInput!
}

input MentorUpdateWithoutTopicsDataInput {
  email: String
  id: String
  languages: String
  linkedin: String
  name: String
  skills: String
}

input MentorUpdateWithWhereUniqueWithoutTopicsInput {
  data: MentorUpdateWithoutTopicsDataInput!
  where: MentorWhereUniqueInput!
}

input MentorUpsertWithWhereUniqueWithoutTopicsInput {
  create: MentorCreateWithoutTopicsInput!
  update: MentorUpdateWithoutTopicsDataInput!
  where: MentorWhereUniqueInput!
}

input MentorWhereInput {
  AND: [MentorWhereInput!]
  email: StringFilter
  id: UUIDFilter
  languages: StringFilter
  linkedin: StringFilter
  name: StringFilter
  NOT: [MentorWhereInput!]
  OR: [MentorWhereInput!]
  skills: StringFilter
  topics: HackerTopicFilter
}

input MentorWhereUniqueInput {
  email: String
  id: String
}

type Mutation {
  anonymizeOneUser(email: String!): Boolean!
  choseTeamChallengeVoteWinner: ChoseTeamChallengeVoteWinnerResult!
  createOneChallenge(data: ChallengeCreateInput!): Challenge!
  createOneHackerSkill(data: HackerSkillCreateInput!): HackerSkill!
  createOneHackerTopic(data: HackerTopicCreateInput!): HackerTopic!
  createOneHackerType(data: HackerTypeCreateInput!): HackerType!
  createOneImage(data: ImageCreateInput!): Image!
  createOneMentor(data: MentorCreateInput!): Mentor!
  createOneProject(data: ProjectCreateInput!): Project!
  createOneSchedule(data: ScheduleCreateInput!): Schedule!
  createOneTeam(data: TeamCreateInput!): Team!
  createOneTeamChallengeVote(data: TeamChallengeVoteCreateInput!): TeamChallengeVote!
  createOneUser(data: UserCreateInput!): User!
  createOneUserRole(data: UserRoleCreateInput!): UserRole!
  deleteManyChallenge(where: ChallengeWhereInput): BatchPayload!
  deleteManyHackerSkill(where: HackerSkillWhereInput): BatchPayload!
  deleteManyHackerTopic(where: HackerTopicWhereInput): BatchPayload!
  deleteManyHackerType(where: HackerTypeWhereInput): BatchPayload!
  deleteManyImage(where: ImageWhereInput): BatchPayload!
  deleteManyMentor(where: MentorWhereInput): BatchPayload!
  deleteManyProject(where: ProjectWhereInput): BatchPayload!
  deleteManySchedule(where: ScheduleWhereInput): BatchPayload!
  deleteManyTeam(where: TeamWhereInput): BatchPayload!
  deleteManyTeamChallengeVote(where: TeamChallengeVoteWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyUserRole(where: UserRoleWhereInput): BatchPayload!
  deleteOneChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deleteOneHackerSkill(where: HackerSkillWhereUniqueInput!): HackerSkill
  deleteOneHackerTopic(where: HackerTopicWhereUniqueInput!): HackerTopic
  deleteOneHackerType(where: HackerTypeWhereUniqueInput!): HackerType
  deleteOneImage(where: ImageWhereUniqueInput!): Image
  deleteOneMentor(where: MentorWhereUniqueInput!): Mentor
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteOneTeam(where: TeamWhereUniqueInput!): Team
  deleteOneTeamChallengeVote(where: TeamChallengeVoteWhereUniqueInput!): TeamChallengeVote
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneUserRole(where: UserRoleWhereUniqueInput!): UserRole
  loginWithToken(email: String, loginToken: String): LoginResult!
  logout: Boolean!
  recreateAllTeams: RecreateAllTeamsResult!
  registerHacker(data: RegisterHackerInput): RegisterResult!
  resendVerificationEmail(email: String): ResendVerificationEmailResult!
  seed: Boolean!
  sendEmailToAllUser(subject: String, text: String): SendEmailToAllUserResult!
  submitDevpostUrl(devpostUrl: String!): Boolean!
  unsetAllSelectedChallenges: UnsetAllSelectedChallengesResult!
  updateManyChallenge(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  updateManyHackerSkill(data: HackerSkillUpdateManyMutationInput!, where: HackerSkillWhereInput): BatchPayload!
  updateManyHackerTopic(data: HackerTopicUpdateManyMutationInput!, where: HackerTopicWhereInput): BatchPayload!
  updateManyHackerType(data: HackerTypeUpdateManyMutationInput!, where: HackerTypeWhereInput): BatchPayload!
  updateManyImage(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  updateManyMentor(data: MentorUpdateManyMutationInput!, where: MentorWhereInput): BatchPayload!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManySchedule(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  updateManyTeam(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateManyTeamChallengeVote(data: TeamChallengeVoteUpdateManyMutationInput!, where: TeamChallengeVoteWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUserRole(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  updateOneChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updateOneHackerSkill(data: HackerSkillUpdateInput!, where: HackerSkillWhereUniqueInput!): HackerSkill
  updateOneHackerTopic(data: HackerTopicUpdateInput!, where: HackerTopicWhereUniqueInput!): HackerTopic
  updateOneHackerType(data: HackerTypeUpdateInput!, where: HackerTypeWhereUniqueInput!): HackerType
  updateOneImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateOneMentor(data: MentorUpdateInput!, where: MentorWhereUniqueInput!): Mentor
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateOneTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateOneTeamChallengeVote(data: TeamChallengeVoteUpdateInput!, where: TeamChallengeVoteWhereUniqueInput!): TeamChallengeVote
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  upsertOneChallenge(create: ChallengeCreateInput!, update: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge!
  upsertOneHackerSkill(create: HackerSkillCreateInput!, update: HackerSkillUpdateInput!, where: HackerSkillWhereUniqueInput!): HackerSkill!
  upsertOneHackerTopic(create: HackerTopicCreateInput!, update: HackerTopicUpdateInput!, where: HackerTopicWhereUniqueInput!): HackerTopic!
  upsertOneHackerType(create: HackerTypeCreateInput!, update: HackerTypeUpdateInput!, where: HackerTypeWhereUniqueInput!): HackerType!
  upsertOneImage(create: ImageCreateInput!, update: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  upsertOneMentor(create: MentorCreateInput!, update: MentorUpdateInput!, where: MentorWhereUniqueInput!): Mentor!
  upsertOneProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertOneSchedule(create: ScheduleCreateInput!, update: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule!
  upsertOneTeam(create: TeamCreateInput!, update: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
  upsertOneTeamChallengeVote(create: TeamChallengeVoteCreateInput!, update: TeamChallengeVoteUpdateInput!, where: TeamChallengeVoteWhereUniqueInput!): TeamChallengeVote!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserRole(create: UserRoleCreateInput!, update: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole!
  voteForChallenge(challengeId: String, score: Int): VoteResult!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Project {
  accomplishments: String
  challenge: Challenge
  description: String
  id: String!
  images(skip: Int): [Image!]!
  isPublished: Boolean!
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String!
  team: Team
  technologiesUsed: String
  thumbnail: Thumbnail
  title: String!
  urls: [String!]!
  valueAdded: String
  videoUrl: String
}

input ProjectCreateInput {
  accomplishments: String
  challenge: ChallengeCreateOneWithoutProjectsInput
  description: String
  id: String
  images: ImageCreateManyWithoutProjectInput
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String!
  team: TeamCreateOneWithoutProjectsInput
  technologiesUsed: String
  thumbnail: ThumbnailCreateOneWithoutProjectInput
  title: String!
  urls: ProjectCreateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectCreateManyWithoutChallengeInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutChallengeInput!]
}

input ProjectCreateManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutTeamInput!]
}

input ProjectCreateOneWithoutImagesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutImagesInput
}

input ProjectCreateurlsInput {
  set: [String!]
}

input ProjectCreateWithoutChallengeInput {
  accomplishments: String
  description: String
  id: String
  images: ImageCreateManyWithoutProjectInput
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String!
  team: TeamCreateOneWithoutProjectsInput
  technologiesUsed: String
  thumbnail: ThumbnailCreateOneWithoutProjectInput
  title: String!
  urls: ProjectCreateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectCreateWithoutImagesInput {
  accomplishments: String
  challenge: ChallengeCreateOneWithoutProjectsInput
  description: String
  id: String
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String!
  team: TeamCreateOneWithoutProjectsInput
  technologiesUsed: String
  thumbnail: ThumbnailCreateOneWithoutProjectInput
  title: String!
  urls: ProjectCreateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectCreateWithoutTeamInput {
  accomplishments: String
  challenge: ChallengeCreateOneWithoutProjectsInput
  description: String
  id: String
  images: ImageCreateManyWithoutProjectInput
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String!
  technologiesUsed: String
  thumbnail: ThumbnailCreateOneWithoutProjectInput
  title: String!
  urls: ProjectCreateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByInput {
  accomplishments: OrderByArg
  challengeId: OrderByArg
  description: OrderByArg
  id: OrderByArg
  isPublished: OrderByArg
  learnings: OrderByArg
  longTermImpact: OrderByArg
  nextSteps: OrderByArg
  obstacles: OrderByArg
  progressDuringHackathon: OrderByArg
  relevanceToChallenge: OrderByArg
  relevanceToHackathon: OrderByArg
  tagline: OrderByArg
  teamId: OrderByArg
  technologiesUsed: OrderByArg
  thumbnailId: OrderByArg
  title: OrderByArg
  valueAdded: OrderByArg
  videoUrl: OrderByArg
}

input ProjectScalarWhereInput {
  accomplishments: NullableStringFilter
  AND: [ProjectScalarWhereInput!]
  challengeId: NullableStringFilter
  description: NullableStringFilter
  id: UUIDFilter
  images: ImageFilter
  isPublished: BooleanFilter
  learnings: NullableStringFilter
  longTermImpact: NullableStringFilter
  nextSteps: NullableStringFilter
  NOT: [ProjectScalarWhereInput!]
  obstacles: NullableStringFilter
  OR: [ProjectScalarWhereInput!]
  progressDuringHackathon: NullableStringFilter
  relevanceToChallenge: NullableStringFilter
  relevanceToHackathon: NullableStringFilter
  tagline: StringFilter
  teamId: NullableStringFilter
  technologiesUsed: NullableStringFilter
  thumbnailId: NullableStringFilter
  title: StringFilter
  valueAdded: NullableStringFilter
  videoUrl: NullableStringFilter
}

input ProjectUpdateInput {
  accomplishments: String
  challenge: ChallengeUpdateOneWithoutProjectsInput
  description: String
  id: String
  images: ImageUpdateManyWithoutProjectInput
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String
  team: TeamUpdateOneWithoutProjectsInput
  technologiesUsed: String
  thumbnail: ThumbnailUpdateOneWithoutProjectInput
  title: String
  urls: ProjectUpdateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectUpdateManyDataInput {
  accomplishments: String
  description: String
  id: String
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String
  technologiesUsed: String
  title: String
  urls: ProjectUpdateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectUpdateManyMutationInput {
  accomplishments: String
  description: String
  id: String
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String
  technologiesUsed: String
  title: String
  urls: ProjectUpdateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectUpdateManyWithoutChallengeInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutChallengeInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutChallengeInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutChallengeInput!]
}

input ProjectUpdateManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutTeamInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTeamInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateOneWithoutImagesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutImagesDataInput
  upsert: ProjectUpsertWithoutImagesInput
}

input ProjectUpdateurlsInput {
  set: [String!]
}

input ProjectUpdateWithoutChallengeDataInput {
  accomplishments: String
  description: String
  id: String
  images: ImageUpdateManyWithoutProjectInput
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String
  team: TeamUpdateOneWithoutProjectsInput
  technologiesUsed: String
  thumbnail: ThumbnailUpdateOneWithoutProjectInput
  title: String
  urls: ProjectUpdateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectUpdateWithoutImagesDataInput {
  accomplishments: String
  challenge: ChallengeUpdateOneWithoutProjectsInput
  description: String
  id: String
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String
  team: TeamUpdateOneWithoutProjectsInput
  technologiesUsed: String
  thumbnail: ThumbnailUpdateOneWithoutProjectInput
  title: String
  urls: ProjectUpdateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectUpdateWithoutTeamDataInput {
  accomplishments: String
  challenge: ChallengeUpdateOneWithoutProjectsInput
  description: String
  id: String
  images: ImageUpdateManyWithoutProjectInput
  isPublished: Boolean
  learnings: String
  longTermImpact: String
  nextSteps: String
  obstacles: String
  progressDuringHackathon: String
  relevanceToChallenge: String
  relevanceToHackathon: String
  tagline: String
  technologiesUsed: String
  thumbnail: ThumbnailUpdateOneWithoutProjectInput
  title: String
  urls: ProjectUpdateurlsInput
  valueAdded: String
  videoUrl: String
}

input ProjectUpdateWithWhereUniqueWithoutChallengeInput {
  data: ProjectUpdateWithoutChallengeDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutTeamInput {
  data: ProjectUpdateWithoutTeamDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutImagesInput {
  create: ProjectCreateWithoutImagesInput!
  update: ProjectUpdateWithoutImagesDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutChallengeInput {
  create: ProjectCreateWithoutChallengeInput!
  update: ProjectUpdateWithoutChallengeDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutTeamInput {
  create: ProjectCreateWithoutTeamInput!
  update: ProjectUpdateWithoutTeamDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  accomplishments: NullableStringFilter
  AND: [ProjectWhereInput!]
  challenge: ChallengeWhereInput
  challengeId: NullableStringFilter
  description: NullableStringFilter
  id: UUIDFilter
  images: ImageFilter
  isPublished: BooleanFilter
  learnings: NullableStringFilter
  longTermImpact: NullableStringFilter
  nextSteps: NullableStringFilter
  NOT: [ProjectWhereInput!]
  obstacles: NullableStringFilter
  OR: [ProjectWhereInput!]
  progressDuringHackathon: NullableStringFilter
  relevanceToChallenge: NullableStringFilter
  relevanceToHackathon: NullableStringFilter
  tagline: StringFilter
  team: TeamWhereInput
  teamId: NullableStringFilter
  technologiesUsed: NullableStringFilter
  thumbnail: ThumbnailWhereInput
  thumbnailId: NullableStringFilter
  title: StringFilter
  valueAdded: NullableStringFilter
  videoUrl: NullableStringFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  challenges(orderBy: ChallengeOrderByInput, skip: Int, where: ChallengeWhereInput): [Challenge!]!
  challengesCount: Int!
  hackerSkill(where: HackerSkillWhereUniqueInput!): HackerSkill
  hackerSkills(orderBy: HackerSkillOrderByInput, skip: Int, where: HackerSkillWhereInput): [HackerSkill!]!
  hackerSkillsCount: Int!
  hackerTopic(where: HackerTopicWhereUniqueInput!): HackerTopic
  hackerTopics(orderBy: HackerTopicOrderByInput, skip: Int, where: HackerTopicWhereInput): [HackerTopic!]!
  hackerTopicsCount: Int!
  hackerType(where: HackerTypeWhereUniqueInput!): HackerType
  hackerTypes(orderBy: HackerTypeOrderByInput, skip: Int, where: HackerTypeWhereInput): [HackerType!]!
  hackerTypesCount: Int!
  image(where: ImageWhereUniqueInput!): Image
  images(orderBy: ImageOrderByInput, skip: Int, where: ImageWhereInput): [Image!]!
  imagesCount: Int!
  me: User
  mentor(where: MentorWhereUniqueInput!): Mentor
  mentors(orderBy: MentorOrderByInput, skip: Int, where: MentorWhereInput): [Mentor!]!
  mentorsCount: Int!
  project(where: ProjectWhereUniqueInput!): Project
  projects(orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]!
  projectsCount: Int!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(orderBy: ScheduleOrderByInput, skip: Int, where: ScheduleWhereInput): [Schedule!]!
  schedulesCount: Int!
  team(where: TeamWhereUniqueInput!): Team
  teamChallengeVote(where: TeamChallengeVoteWhereUniqueInput!): TeamChallengeVote
  teamChallengeVotes(orderBy: TeamChallengeVoteOrderByInput, skip: Int, where: TeamChallengeVoteWhereInput): [TeamChallengeVote!]!
  teamChallengeVotesCount: Int!
  teams(orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]!
  teamsCount: Int!
  user(where: UserWhereUniqueInput!): User
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRoles(orderBy: UserRoleOrderByInput, skip: Int, where: UserRoleWhereInput): [UserRole!]!
  userRolesCount: Int!
  users(orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersCount: Int!
}

type RecreateAllTeamsResult {
  teams: [Team!]!
}

input RegisterHackerInput {
  city: String!
  email: String!
  facebook: String
  firstname: String!
  hackerSkills: [String!]!
  hackerTopics: [String!]!
  hackerTypes: [String!]!
  instagram: String
  languages: [String!]!
  lastname: String!
  linkedin: String
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  profilePhotoBase64: String
  twitter: String
}

type RegisterResult {
  success: Boolean!
}

type ResendVerificationEmailResult {
  success: Boolean!
}

type Schedule {
  color: String
  data: String!
  from: DateTime!
  id: String!
  title: String!
  to: DateTime!
  type: ScheduleType!
}

input ScheduleCreateInput {
  color: String
  data: String!
  from: DateTime!
  id: String
  title: String!
  to: DateTime!
  type: ScheduleType!
}

input ScheduleOrderByInput {
  color: OrderByArg
  data: OrderByArg
  from: OrderByArg
  id: OrderByArg
  title: OrderByArg
  to: OrderByArg
  type: OrderByArg
}

enum ScheduleType {
  EXTERNAL_LINK
  INTERNAL_LINK
}

input ScheduleUpdateInput {
  color: String
  data: String
  from: DateTime
  id: String
  title: String
  to: DateTime
  type: ScheduleType
}

input ScheduleUpdateManyMutationInput {
  color: String
  data: String
  from: DateTime
  id: String
  title: String
  to: DateTime
  type: ScheduleType
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  color: NullableStringFilter
  data: StringFilter
  from: DateTimeFilter
  id: UUIDFilter
  NOT: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  title: StringFilter
  to: DateTimeFilter
  type: ScheduleType
}

input ScheduleWhereUniqueInput {
  from_to: FromToCompoundUniqueInput
  id: String
}

type SendEmailToAllUserResult {
  emailsSent: Int!
}

type SlackConversation {
  id: String!
  url: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Team {
  challengeSelected: Challenge
  challengesToSelect(skip: Int): [Challenge!]!
  challengesToSelectWithMyVotes: [ChallengeWithMyVote!]!
  id: String!
  members(skip: Int): [User!]!
  primaryTopic: HackerTopic
  projects(skip: Int): [Project!]!
  slack: SlackConversation
  tags: [String!]!
}

type TeamChallengeVote {
  id: String!
}

input TeamChallengeVoteCreateInput {
  challenge: ChallengeCreateOneWithoutTeamChallengeVotesInput!
  id: String
  score: Int!
  team: TeamCreateOneWithoutChallengeVotesInput
  user: UserCreateOneWithoutTeamChallengeVotesInput!
}

input TeamChallengeVoteCreateManyWithoutChallengeInput {
  connect: [TeamChallengeVoteWhereUniqueInput!]
  create: [TeamChallengeVoteCreateWithoutChallengeInput!]
}

input TeamChallengeVoteCreateManyWithoutTeamInput {
  connect: [TeamChallengeVoteWhereUniqueInput!]
  create: [TeamChallengeVoteCreateWithoutTeamInput!]
}

input TeamChallengeVoteCreateManyWithoutUserInput {
  connect: [TeamChallengeVoteWhereUniqueInput!]
  create: [TeamChallengeVoteCreateWithoutUserInput!]
}

input TeamChallengeVoteCreateWithoutChallengeInput {
  id: String
  score: Int!
  team: TeamCreateOneWithoutChallengeVotesInput
  user: UserCreateOneWithoutTeamChallengeVotesInput!
}

input TeamChallengeVoteCreateWithoutTeamInput {
  challenge: ChallengeCreateOneWithoutTeamChallengeVotesInput!
  id: String
  score: Int!
  user: UserCreateOneWithoutTeamChallengeVotesInput!
}

input TeamChallengeVoteCreateWithoutUserInput {
  challenge: ChallengeCreateOneWithoutTeamChallengeVotesInput!
  id: String
  score: Int!
  team: TeamCreateOneWithoutChallengeVotesInput
}

input TeamChallengeVoteFilter {
  every: TeamChallengeVoteWhereInput
  none: TeamChallengeVoteWhereInput
  some: TeamChallengeVoteWhereInput
}

input TeamChallengeVoteOrderByInput {
  challengeId: OrderByArg
  id: OrderByArg
  score: OrderByArg
  teamId: OrderByArg
  userId: OrderByArg
}

input TeamChallengeVoteScalarWhereInput {
  AND: [TeamChallengeVoteScalarWhereInput!]
  challengeId: StringFilter
  id: UUIDFilter
  NOT: [TeamChallengeVoteScalarWhereInput!]
  OR: [TeamChallengeVoteScalarWhereInput!]
  score: IntFilter
  teamId: NullableStringFilter
  userId: StringFilter
}

input TeamChallengeVoteUpdateInput {
  challenge: ChallengeUpdateOneRequiredWithoutTeamChallengeVotesInput
  id: String
  score: Int
  team: TeamUpdateOneWithoutChallengeVotesInput
  user: UserUpdateOneRequiredWithoutTeamChallengeVotesInput
}

input TeamChallengeVoteUpdateManyDataInput {
  id: String
  score: Int
}

input TeamChallengeVoteUpdateManyMutationInput {
  id: String
  score: Int
}

input TeamChallengeVoteUpdateManyWithoutChallengeInput {
  connect: [TeamChallengeVoteWhereUniqueInput!]
  create: [TeamChallengeVoteCreateWithoutChallengeInput!]
  delete: [TeamChallengeVoteWhereUniqueInput!]
  deleteMany: [TeamChallengeVoteScalarWhereInput!]
  disconnect: [TeamChallengeVoteWhereUniqueInput!]
  set: [TeamChallengeVoteWhereUniqueInput!]
  update: [TeamChallengeVoteUpdateWithWhereUniqueWithoutChallengeInput!]
  updateMany: [TeamChallengeVoteUpdateManyWithWhereNestedInput!]
  upsert: [TeamChallengeVoteUpsertWithWhereUniqueWithoutChallengeInput!]
}

input TeamChallengeVoteUpdateManyWithoutTeamInput {
  connect: [TeamChallengeVoteWhereUniqueInput!]
  create: [TeamChallengeVoteCreateWithoutTeamInput!]
  delete: [TeamChallengeVoteWhereUniqueInput!]
  deleteMany: [TeamChallengeVoteScalarWhereInput!]
  disconnect: [TeamChallengeVoteWhereUniqueInput!]
  set: [TeamChallengeVoteWhereUniqueInput!]
  update: [TeamChallengeVoteUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [TeamChallengeVoteUpdateManyWithWhereNestedInput!]
  upsert: [TeamChallengeVoteUpsertWithWhereUniqueWithoutTeamInput!]
}

input TeamChallengeVoteUpdateManyWithoutUserInput {
  connect: [TeamChallengeVoteWhereUniqueInput!]
  create: [TeamChallengeVoteCreateWithoutUserInput!]
  delete: [TeamChallengeVoteWhereUniqueInput!]
  deleteMany: [TeamChallengeVoteScalarWhereInput!]
  disconnect: [TeamChallengeVoteWhereUniqueInput!]
  set: [TeamChallengeVoteWhereUniqueInput!]
  update: [TeamChallengeVoteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TeamChallengeVoteUpdateManyWithWhereNestedInput!]
  upsert: [TeamChallengeVoteUpsertWithWhereUniqueWithoutUserInput!]
}

input TeamChallengeVoteUpdateManyWithWhereNestedInput {
  data: TeamChallengeVoteUpdateManyDataInput!
  where: TeamChallengeVoteScalarWhereInput!
}

input TeamChallengeVoteUpdateWithoutChallengeDataInput {
  id: String
  score: Int
  team: TeamUpdateOneWithoutChallengeVotesInput
  user: UserUpdateOneRequiredWithoutTeamChallengeVotesInput
}

input TeamChallengeVoteUpdateWithoutTeamDataInput {
  challenge: ChallengeUpdateOneRequiredWithoutTeamChallengeVotesInput
  id: String
  score: Int
  user: UserUpdateOneRequiredWithoutTeamChallengeVotesInput
}

input TeamChallengeVoteUpdateWithoutUserDataInput {
  challenge: ChallengeUpdateOneRequiredWithoutTeamChallengeVotesInput
  id: String
  score: Int
  team: TeamUpdateOneWithoutChallengeVotesInput
}

input TeamChallengeVoteUpdateWithWhereUniqueWithoutChallengeInput {
  data: TeamChallengeVoteUpdateWithoutChallengeDataInput!
  where: TeamChallengeVoteWhereUniqueInput!
}

input TeamChallengeVoteUpdateWithWhereUniqueWithoutTeamInput {
  data: TeamChallengeVoteUpdateWithoutTeamDataInput!
  where: TeamChallengeVoteWhereUniqueInput!
}

input TeamChallengeVoteUpdateWithWhereUniqueWithoutUserInput {
  data: TeamChallengeVoteUpdateWithoutUserDataInput!
  where: TeamChallengeVoteWhereUniqueInput!
}

input TeamChallengeVoteUpsertWithWhereUniqueWithoutChallengeInput {
  create: TeamChallengeVoteCreateWithoutChallengeInput!
  update: TeamChallengeVoteUpdateWithoutChallengeDataInput!
  where: TeamChallengeVoteWhereUniqueInput!
}

input TeamChallengeVoteUpsertWithWhereUniqueWithoutTeamInput {
  create: TeamChallengeVoteCreateWithoutTeamInput!
  update: TeamChallengeVoteUpdateWithoutTeamDataInput!
  where: TeamChallengeVoteWhereUniqueInput!
}

input TeamChallengeVoteUpsertWithWhereUniqueWithoutUserInput {
  create: TeamChallengeVoteCreateWithoutUserInput!
  update: TeamChallengeVoteUpdateWithoutUserDataInput!
  where: TeamChallengeVoteWhereUniqueInput!
}

input TeamChallengeVoteWhereInput {
  AND: [TeamChallengeVoteWhereInput!]
  challenge: ChallengeWhereInput
  challengeId: StringFilter
  id: UUIDFilter
  NOT: [TeamChallengeVoteWhereInput!]
  OR: [TeamChallengeVoteWhereInput!]
  score: IntFilter
  team: TeamWhereInput
  teamId: NullableStringFilter
  user: UserWhereInput
  userId: StringFilter
}

input TeamChallengeVoteWhereUniqueInput {
  id: String
  userId_challengeId_teamId: UserIdChallengeIdTeamIdCompoundUniqueInput
}

input TeamCreateInput {
  challengeSelected: ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteCreateManyWithoutTeamInput
  id: String!
  members: UserCreateManyWithoutTeamInput
  primaryTopic: HackerTopicCreateOneWithoutTeamsInput
  projects: ProjectCreateManyWithoutTeamInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamCreateManyWithoutChallengeSelectedInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutChallengeSelectedInput!]
}

input TeamCreateManyWithoutChallengesToSelectInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutChallengesToSelectInput!]
}

input TeamCreateManyWithoutPrimaryTopicInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutPrimaryTopicInput!]
}

input TeamCreateOneWithoutChallengeVotesInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutChallengeVotesInput
}

input TeamCreateOneWithoutMembersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMembersInput
}

input TeamCreateOneWithoutProjectsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutProjectsInput
}

input TeamCreatetagsInput {
  set: [String!]
}

input TeamCreateWithoutChallengeSelectedInput {
  challengesToSelect: ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteCreateManyWithoutTeamInput
  id: String!
  members: UserCreateManyWithoutTeamInput
  primaryTopic: HackerTopicCreateOneWithoutTeamsInput
  projects: ProjectCreateManyWithoutTeamInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamCreateWithoutChallengesToSelectInput {
  challengeSelected: ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput
  challengeVotes: TeamChallengeVoteCreateManyWithoutTeamInput
  id: String!
  members: UserCreateManyWithoutTeamInput
  primaryTopic: HackerTopicCreateOneWithoutTeamsInput
  projects: ProjectCreateManyWithoutTeamInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamCreateWithoutChallengeVotesInput {
  challengeSelected: ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput
  id: String!
  members: UserCreateManyWithoutTeamInput
  primaryTopic: HackerTopicCreateOneWithoutTeamsInput
  projects: ProjectCreateManyWithoutTeamInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamCreateWithoutMembersInput {
  challengeSelected: ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteCreateManyWithoutTeamInput
  id: String!
  primaryTopic: HackerTopicCreateOneWithoutTeamsInput
  projects: ProjectCreateManyWithoutTeamInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamCreateWithoutPrimaryTopicInput {
  challengeSelected: ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteCreateManyWithoutTeamInput
  id: String!
  members: UserCreateManyWithoutTeamInput
  projects: ProjectCreateManyWithoutTeamInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamCreateWithoutProjectsInput {
  challengeSelected: ChallengeCreateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeCreateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteCreateManyWithoutTeamInput
  id: String!
  members: UserCreateManyWithoutTeamInput
  primaryTopic: HackerTopicCreateOneWithoutTeamsInput
  slackId: String
  tags: TeamCreatetagsInput
}

input TeamFilter {
  every: TeamWhereInput
  none: TeamWhereInput
  some: TeamWhereInput
}

input TeamOrderByInput {
  challengeSelectedId: OrderByArg
  id: OrderByArg
  primaryTopicId: OrderByArg
  slackId: OrderByArg
}

input TeamScalarWhereInput {
  AND: [TeamScalarWhereInput!]
  challengeSelectedId: NullableStringFilter
  challengesToSelect: ChallengeFilter
  challengeVotes: TeamChallengeVoteFilter
  id: StringFilter
  members: UserFilter
  NOT: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  primaryTopicId: NullableStringFilter
  projects: ProjectFilter
  slackId: NullableStringFilter
}

input TeamUpdateInput {
  challengeSelected: ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteUpdateManyWithoutTeamInput
  id: String
  members: UserUpdateManyWithoutTeamInput
  primaryTopic: HackerTopicUpdateOneWithoutTeamsInput
  projects: ProjectUpdateManyWithoutTeamInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateManyDataInput {
  id: String
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateManyMutationInput {
  id: String
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateManyWithoutChallengeSelectedInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutChallengeSelectedInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutChallengeSelectedInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutChallengeSelectedInput!]
}

input TeamUpdateManyWithoutChallengesToSelectInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutChallengesToSelectInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutChallengesToSelectInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutChallengesToSelectInput!]
}

input TeamUpdateManyWithoutPrimaryTopicInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutPrimaryTopicInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutPrimaryTopicInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutPrimaryTopicInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  data: TeamUpdateManyDataInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateOneWithoutChallengeVotesInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutChallengeVotesInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutChallengeVotesDataInput
  upsert: TeamUpsertWithoutChallengeVotesInput
}

input TeamUpdateOneWithoutMembersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
}

input TeamUpdateOneWithoutProjectsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutProjectsInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutProjectsDataInput
  upsert: TeamUpsertWithoutProjectsInput
}

input TeamUpdatetagsInput {
  set: [String!]
}

input TeamUpdateWithoutChallengeSelectedDataInput {
  challengesToSelect: ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteUpdateManyWithoutTeamInput
  id: String
  members: UserUpdateManyWithoutTeamInput
  primaryTopic: HackerTopicUpdateOneWithoutTeamsInput
  projects: ProjectUpdateManyWithoutTeamInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateWithoutChallengesToSelectDataInput {
  challengeSelected: ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput
  challengeVotes: TeamChallengeVoteUpdateManyWithoutTeamInput
  id: String
  members: UserUpdateManyWithoutTeamInput
  primaryTopic: HackerTopicUpdateOneWithoutTeamsInput
  projects: ProjectUpdateManyWithoutTeamInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateWithoutChallengeVotesDataInput {
  challengeSelected: ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput
  id: String
  members: UserUpdateManyWithoutTeamInput
  primaryTopic: HackerTopicUpdateOneWithoutTeamsInput
  projects: ProjectUpdateManyWithoutTeamInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateWithoutMembersDataInput {
  challengeSelected: ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteUpdateManyWithoutTeamInput
  id: String
  primaryTopic: HackerTopicUpdateOneWithoutTeamsInput
  projects: ProjectUpdateManyWithoutTeamInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateWithoutPrimaryTopicDataInput {
  challengeSelected: ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteUpdateManyWithoutTeamInput
  id: String
  members: UserUpdateManyWithoutTeamInput
  projects: ProjectUpdateManyWithoutTeamInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateWithoutProjectsDataInput {
  challengeSelected: ChallengeUpdateOneWithoutTeamsThatSelectedThisChallengeInput
  challengesToSelect: ChallengeUpdateManyWithoutTeamsThatCanSelectThisChallengeInput
  challengeVotes: TeamChallengeVoteUpdateManyWithoutTeamInput
  id: String
  members: UserUpdateManyWithoutTeamInput
  primaryTopic: HackerTopicUpdateOneWithoutTeamsInput
  slackId: String
  tags: TeamUpdatetagsInput
}

input TeamUpdateWithWhereUniqueWithoutChallengeSelectedInput {
  data: TeamUpdateWithoutChallengeSelectedDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpdateWithWhereUniqueWithoutChallengesToSelectInput {
  data: TeamUpdateWithoutChallengesToSelectDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpdateWithWhereUniqueWithoutPrimaryTopicInput {
  data: TeamUpdateWithoutPrimaryTopicDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithoutChallengeVotesInput {
  create: TeamCreateWithoutChallengeVotesInput!
  update: TeamUpdateWithoutChallengeVotesDataInput!
}

input TeamUpsertWithoutMembersInput {
  create: TeamCreateWithoutMembersInput!
  update: TeamUpdateWithoutMembersDataInput!
}

input TeamUpsertWithoutProjectsInput {
  create: TeamCreateWithoutProjectsInput!
  update: TeamUpdateWithoutProjectsDataInput!
}

input TeamUpsertWithWhereUniqueWithoutChallengeSelectedInput {
  create: TeamCreateWithoutChallengeSelectedInput!
  update: TeamUpdateWithoutChallengeSelectedDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithWhereUniqueWithoutChallengesToSelectInput {
  create: TeamCreateWithoutChallengesToSelectInput!
  update: TeamUpdateWithoutChallengesToSelectDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithWhereUniqueWithoutPrimaryTopicInput {
  create: TeamCreateWithoutPrimaryTopicInput!
  update: TeamUpdateWithoutPrimaryTopicDataInput!
  where: TeamWhereUniqueInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  challengeSelected: ChallengeWhereInput
  challengeSelectedId: NullableStringFilter
  challengesToSelect: ChallengeFilter
  challengeVotes: TeamChallengeVoteFilter
  id: StringFilter
  members: UserFilter
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  primaryTopic: HackerTopicWhereInput
  primaryTopicId: NullableStringFilter
  projects: ProjectFilter
  slackId: NullableStringFilter
}

input TeamWhereUniqueInput {
  id: String
}

type Thumbnail {
  base64: String!
  id: String!
}

input ThumbnailCreateOneWithoutProjectInput {
  connect: ThumbnailWhereUniqueInput
  create: ThumbnailCreateWithoutProjectInput
}

input ThumbnailCreateWithoutProjectInput {
  base64: String!
  id: String
}

input ThumbnailUpdateOneWithoutProjectInput {
  connect: ThumbnailWhereUniqueInput
  create: ThumbnailCreateWithoutProjectInput
  delete: Boolean
  disconnect: Boolean
  update: ThumbnailUpdateWithoutProjectDataInput
  upsert: ThumbnailUpsertWithoutProjectInput
}

input ThumbnailUpdateWithoutProjectDataInput {
  base64: String
  id: String
}

input ThumbnailUpsertWithoutProjectInput {
  create: ThumbnailCreateWithoutProjectInput!
  update: ThumbnailUpdateWithoutProjectDataInput!
}

input ThumbnailWhereInput {
  AND: [ThumbnailWhereInput!]
  base64: StringFilter
  id: UUIDFilter
  NOT: [ThumbnailWhereInput!]
  OR: [ThumbnailWhereInput!]
  Project: ProjectFilter
}

input ThumbnailWhereUniqueInput {
  id: String
}

type UnsetAllSelectedChallengesResult {
  success: Boolean!
  teams: [Team!]!
}

type User {
  city: String!
  devpostUrl: String
  email: String!
  facebook: String
  firstname: String!
  hackerSkills(skip: Int): [HackerSkill!]!
  hackerTopics(skip: Int): [HackerTopic!]!
  hackerTypes(skip: Int): [HackerType!]!
  id: String!
  instagram: String
  languages: [String!]!
  lastname: String!
  linkedin: String
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  profilePhoto: Image
  roles(skip: Int): [UserRole!]!
  team: Team
  twitter: String
}

input UserCreateInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreatelanguagesInput {
  set: [String!]
}

input UserCreateManyWithoutHackerSkillsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHackerSkillsInput!]
}

input UserCreateManyWithoutHackerTopicsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHackerTopicsInput!]
}

input UserCreateManyWithoutHackerTypesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHackerTypesInput!]
}

input UserCreateManyWithoutPreferredChallengeInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutPreferredChallengeInput!]
}

input UserCreateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTeamInput!]
}

input UserCreateOneWithoutProfilePhotoInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfilePhotoInput
}

input UserCreateOneWithoutTeamChallengeVotesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTeamChallengeVotesInput
}

input UserCreateWithoutHackerSkillsInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreateWithoutHackerTopicsInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreateWithoutHackerTypesInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreateWithoutPreferredChallengeInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreateWithoutProfilePhotoInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreateWithoutRolesInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  team: TeamCreateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserCreateWithoutTeamChallengeVotesInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  team: TeamCreateOneWithoutMembersInput
  twitter: String
}

input UserCreateWithoutTeamInput {
  city: String!
  devpostUrl: String
  email: String!
  emailConfirmed: Boolean!
  facebook: String
  firstname: String!
  hackerSkills: HackerSkillCreateManyWithoutUsersInput
  hackerTopics: HackerTopicCreateManyWithoutUsersInput
  hackerTypes: HackerTypeCreateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserCreatelanguagesInput
  lastname: String!
  linkedin: String
  loginTokens: UserLoginTokenCreateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String!
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeCreateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageCreateOneWithoutUserInput
  resumeTokens: UserResumeTokenCreateManyWithoutUserInput
  roles: UserRoleCreateManyWithoutUsersInput
  teamChallengeVotes: TeamChallengeVoteCreateManyWithoutUserInput
  twitter: String
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserIdChallengeIdTeamIdCompoundUniqueInput {
  challengeId: String!
  teamId: String!
  userId: String!
}

input UserLoginTokenCreateManyWithoutUserInput {
  connect: [UserLoginTokenWhereUniqueInput!]
  create: [UserLoginTokenCreateWithoutUserInput!]
}

input UserLoginTokenCreateWithoutUserInput {
  created: DateTime
  hashedToken: String!
  id: String
}

input UserLoginTokenFilter {
  every: UserLoginTokenWhereInput
  none: UserLoginTokenWhereInput
  some: UserLoginTokenWhereInput
}

input UserLoginTokenScalarWhereInput {
  AND: [UserLoginTokenScalarWhereInput!]
  created: DateTimeFilter
  hashedToken: StringFilter
  id: UUIDFilter
  NOT: [UserLoginTokenScalarWhereInput!]
  OR: [UserLoginTokenScalarWhereInput!]
  userId: NullableStringFilter
}

input UserLoginTokenUpdateManyDataInput {
  created: DateTime
  hashedToken: String
  id: String
}

input UserLoginTokenUpdateManyWithoutUserInput {
  connect: [UserLoginTokenWhereUniqueInput!]
  create: [UserLoginTokenCreateWithoutUserInput!]
  delete: [UserLoginTokenWhereUniqueInput!]
  deleteMany: [UserLoginTokenScalarWhereInput!]
  disconnect: [UserLoginTokenWhereUniqueInput!]
  set: [UserLoginTokenWhereUniqueInput!]
  update: [UserLoginTokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserLoginTokenUpdateManyWithWhereNestedInput!]
  upsert: [UserLoginTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input UserLoginTokenUpdateManyWithWhereNestedInput {
  data: UserLoginTokenUpdateManyDataInput!
  where: UserLoginTokenScalarWhereInput!
}

input UserLoginTokenUpdateWithoutUserDataInput {
  created: DateTime
  hashedToken: String
  id: String
}

input UserLoginTokenUpdateWithWhereUniqueWithoutUserInput {
  data: UserLoginTokenUpdateWithoutUserDataInput!
  where: UserLoginTokenWhereUniqueInput!
}

input UserLoginTokenUpsertWithWhereUniqueWithoutUserInput {
  create: UserLoginTokenCreateWithoutUserInput!
  update: UserLoginTokenUpdateWithoutUserDataInput!
  where: UserLoginTokenWhereUniqueInput!
}

input UserLoginTokenWhereInput {
  AND: [UserLoginTokenWhereInput!]
  created: DateTimeFilter
  hashedToken: StringFilter
  id: UUIDFilter
  NOT: [UserLoginTokenWhereInput!]
  OR: [UserLoginTokenWhereInput!]
  user: UserWhereInput
  userId: NullableStringFilter
}

input UserLoginTokenWhereUniqueInput {
  hashedToken: String
  id: String
}

input UserOrderByInput {
  city: OrderByArg
  devpostUrl: OrderByArg
  email: OrderByArg
  emailConfirmed: OrderByArg
  facebook: OrderByArg
  firstname: OrderByArg
  id: OrderByArg
  instagram: OrderByArg
  isAnonymized: OrderByArg
  lastname: OrderByArg
  linkedin: OrderByArg
  participateInTeamBuildingSession: OrderByArg
  phoneNumber: OrderByArg
  possibleTeamMemberEmails: OrderByArg
  preferredChallengeId: OrderByArg
  profilePhotoId: OrderByArg
  teamId: OrderByArg
  twitter: OrderByArg
}

input UserResumeTokenCreateManyWithoutUserInput {
  connect: [UserResumeTokenWhereUniqueInput!]
  create: [UserResumeTokenCreateWithoutUserInput!]
}

input UserResumeTokenCreateWithoutUserInput {
  created: DateTime
  hashedToken: String!
  id: String
}

input UserResumeTokenFilter {
  every: UserResumeTokenWhereInput
  none: UserResumeTokenWhereInput
  some: UserResumeTokenWhereInput
}

input UserResumeTokenScalarWhereInput {
  AND: [UserResumeTokenScalarWhereInput!]
  created: DateTimeFilter
  hashedToken: StringFilter
  id: UUIDFilter
  NOT: [UserResumeTokenScalarWhereInput!]
  OR: [UserResumeTokenScalarWhereInput!]
  userId: NullableStringFilter
}

input UserResumeTokenUpdateManyDataInput {
  created: DateTime
  hashedToken: String
  id: String
}

input UserResumeTokenUpdateManyWithoutUserInput {
  connect: [UserResumeTokenWhereUniqueInput!]
  create: [UserResumeTokenCreateWithoutUserInput!]
  delete: [UserResumeTokenWhereUniqueInput!]
  deleteMany: [UserResumeTokenScalarWhereInput!]
  disconnect: [UserResumeTokenWhereUniqueInput!]
  set: [UserResumeTokenWhereUniqueInput!]
  update: [UserResumeTokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserResumeTokenUpdateManyWithWhereNestedInput!]
  upsert: [UserResumeTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input UserResumeTokenUpdateManyWithWhereNestedInput {
  data: UserResumeTokenUpdateManyDataInput!
  where: UserResumeTokenScalarWhereInput!
}

input UserResumeTokenUpdateWithoutUserDataInput {
  created: DateTime
  hashedToken: String
  id: String
}

input UserResumeTokenUpdateWithWhereUniqueWithoutUserInput {
  data: UserResumeTokenUpdateWithoutUserDataInput!
  where: UserResumeTokenWhereUniqueInput!
}

input UserResumeTokenUpsertWithWhereUniqueWithoutUserInput {
  create: UserResumeTokenCreateWithoutUserInput!
  update: UserResumeTokenUpdateWithoutUserDataInput!
  where: UserResumeTokenWhereUniqueInput!
}

input UserResumeTokenWhereInput {
  AND: [UserResumeTokenWhereInput!]
  created: DateTimeFilter
  hashedToken: StringFilter
  id: UUIDFilter
  NOT: [UserResumeTokenWhereInput!]
  OR: [UserResumeTokenWhereInput!]
  user: UserWhereInput
  userId: NullableStringFilter
}

input UserResumeTokenWhereUniqueInput {
  hashedToken: String
  id: String
}

type UserRole {
  id: String!
  users(skip: Int): [User!]!
}

input UserRoleCreateInput {
  id: String!
  users: UserCreateManyWithoutRolesInput
}

input UserRoleCreateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUsersInput!]
}

input UserRoleCreateWithoutUsersInput {
  id: String!
}

input UserRoleFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleOrderByInput {
  id: OrderByArg
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  id: StringFilter
  NOT: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
  users: UserFilter
}

input UserRoleUpdateInput {
  id: String
  users: UserUpdateManyWithoutRolesInput
}

input UserRoleUpdateManyDataInput {
  id: String
}

input UserRoleUpdateManyMutationInput {
  id: String
}

input UserRoleUpdateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUsersInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input UserRoleUpdateManyWithWhereNestedInput {
  data: UserRoleUpdateManyDataInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateWithoutUsersDataInput {
  id: String
}

input UserRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: UserRoleUpdateWithoutUsersDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput!
  update: UserRoleUpdateWithoutUsersDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  id: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  users: UserFilter
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  city: StringFilter
  devpostUrl: NullableStringFilter
  email: StringFilter
  emailConfirmed: BooleanFilter
  facebook: NullableStringFilter
  firstname: StringFilter
  hackerSkills: HackerSkillFilter
  hackerTopics: HackerTopicFilter
  hackerTypes: HackerTypeFilter
  id: UUIDFilter
  instagram: NullableStringFilter
  isAnonymized: BooleanFilter
  lastname: StringFilter
  linkedin: NullableStringFilter
  loginTokens: UserLoginTokenFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  participateInTeamBuildingSession: NullableBooleanFilter
  phoneNumber: StringFilter
  possibleTeamMemberEmails: NullableStringFilter
  preferredChallengeId: NullableStringFilter
  profilePhotoId: NullableStringFilter
  resumeTokens: UserResumeTokenFilter
  roles: UserRoleFilter
  teamChallengeVotes: TeamChallengeVoteFilter
  teamId: NullableStringFilter
  twitter: NullableStringFilter
}

input UserUpdateInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdatelanguagesInput {
  set: [String!]
}

input UserUpdateManyDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  twitter: String
}

input UserUpdateManyMutationInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  twitter: String
}

input UserUpdateManyWithoutHackerSkillsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHackerSkillsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHackerSkillsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHackerSkillsInput!]
}

input UserUpdateManyWithoutHackerTopicsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHackerTopicsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHackerTopicsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHackerTopicsInput!]
}

input UserUpdateManyWithoutHackerTypesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHackerTypesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHackerTypesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHackerTypesInput!]
}

input UserUpdateManyWithoutPreferredChallengeInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutPreferredChallengeInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPreferredChallengeInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPreferredChallengeInput!]
}

input UserUpdateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTeamInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutTeamChallengeVotesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTeamChallengeVotesInput
  update: UserUpdateWithoutTeamChallengeVotesDataInput
  upsert: UserUpsertWithoutTeamChallengeVotesInput
}

input UserUpdateOneWithoutProfilePhotoInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfilePhotoInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutProfilePhotoDataInput
  upsert: UserUpsertWithoutProfilePhotoInput
}

input UserUpdateWithoutHackerSkillsDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithoutHackerTopicsDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithoutHackerTypesDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithoutPreferredChallengeDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithoutProfilePhotoDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithoutRolesDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  team: TeamUpdateOneWithoutMembersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithoutTeamChallengeVotesDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  team: TeamUpdateOneWithoutMembersInput
  twitter: String
}

input UserUpdateWithoutTeamDataInput {
  city: String
  devpostUrl: String
  email: String
  emailConfirmed: Boolean
  facebook: String
  firstname: String
  hackerSkills: HackerSkillUpdateManyWithoutUsersInput
  hackerTopics: HackerTopicUpdateManyWithoutUsersInput
  hackerTypes: HackerTypeUpdateManyWithoutUsersInput
  id: String
  instagram: String
  isAnonymized: Boolean
  languages: UserUpdatelanguagesInput
  lastname: String
  linkedin: String
  loginTokens: UserLoginTokenUpdateManyWithoutUserInput
  participateInTeamBuildingSession: Boolean
  phoneNumber: String
  possibleTeamMemberEmails: String
  preferredChallenge: ChallengeUpdateOneWithoutUsersThatPreferThisChallengeInput
  profilePhoto: ImageUpdateOneWithoutUserInput
  resumeTokens: UserResumeTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  teamChallengeVotes: TeamChallengeVoteUpdateManyWithoutUserInput
  twitter: String
}

input UserUpdateWithWhereUniqueWithoutHackerSkillsInput {
  data: UserUpdateWithoutHackerSkillsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutHackerTopicsInput {
  data: UserUpdateWithoutHackerTopicsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutHackerTypesInput {
  data: UserUpdateWithoutHackerTypesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutPreferredChallengeInput {
  data: UserUpdateWithoutPreferredChallengeDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  data: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  data: UserUpdateWithoutTeamDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutProfilePhotoInput {
  create: UserCreateWithoutProfilePhotoInput!
  update: UserUpdateWithoutProfilePhotoDataInput!
}

input UserUpsertWithoutTeamChallengeVotesInput {
  create: UserCreateWithoutTeamChallengeVotesInput!
  update: UserUpdateWithoutTeamChallengeVotesDataInput!
}

input UserUpsertWithWhereUniqueWithoutHackerSkillsInput {
  create: UserCreateWithoutHackerSkillsInput!
  update: UserUpdateWithoutHackerSkillsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutHackerTopicsInput {
  create: UserCreateWithoutHackerTopicsInput!
  update: UserUpdateWithoutHackerTopicsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutHackerTypesInput {
  create: UserCreateWithoutHackerTypesInput!
  update: UserUpdateWithoutHackerTypesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutPreferredChallengeInput {
  create: UserCreateWithoutPreferredChallengeInput!
  update: UserUpdateWithoutPreferredChallengeDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  update: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  create: UserCreateWithoutTeamInput!
  update: UserUpdateWithoutTeamDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  city: StringFilter
  devpostUrl: NullableStringFilter
  email: StringFilter
  emailConfirmed: BooleanFilter
  facebook: NullableStringFilter
  firstname: StringFilter
  hackerSkills: HackerSkillFilter
  hackerTopics: HackerTopicFilter
  hackerTypes: HackerTypeFilter
  id: UUIDFilter
  instagram: NullableStringFilter
  isAnonymized: BooleanFilter
  lastname: StringFilter
  linkedin: NullableStringFilter
  loginTokens: UserLoginTokenFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  participateInTeamBuildingSession: NullableBooleanFilter
  phoneNumber: StringFilter
  possibleTeamMemberEmails: NullableStringFilter
  preferredChallenge: ChallengeWhereInput
  preferredChallengeId: NullableStringFilter
  profilePhoto: ImageWhereInput
  profilePhotoId: NullableStringFilter
  resumeTokens: UserResumeTokenFilter
  roles: UserRoleFilter
  team: TeamWhereInput
  teamChallengeVotes: TeamChallengeVoteFilter
  teamId: NullableStringFilter
  twitter: NullableStringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}

type VoteResult {
  team: Team!
}
